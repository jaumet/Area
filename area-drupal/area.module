<?php
// $Id$
global $base_path;
global $base_url;

/**
* Valid permissions for this module
* @return array An array of valid permissions for the onthisdate module
*/
function area_perm() {
	return array('access area content');
} 

/**
 * Implementation of hook_init(). Add's the book module's CSS.
 */
function area_init() {
	drupal_add_css(drupal_get_path('module', 'area') .'/css/area.css');
}

//function area_block($op = 'list', $delta = 0) {
//}

function area_block($op = 'list', $delta = 0) {
	//uncomment to reset values:
	//variable_set('area_param1', "type");
	//variable_set('area_param2', "type");
	///////$form_var = variable_get('area_param1', "type");

	// Check if we are showing area in the page:
	function _curPageURL() {
		$pageURL = 'http';
		if ($_SERVER["HTTPS"] == "on") {$pageURL .= "s";}
			$pageURL .= "://";
		if ($_SERVER["SERVER_PORT"] != "80") {
			$pageURL .= $_SERVER["SERVER_NAME"].":".$_SERVER["SERVER_PORT"].$_SERVER["REQUEST_URI"];
		} else {
			$pageURL .= $_SERVER["SERVER_NAME"].$_SERVER["REQUEST_URI"];
		}
		return $pageURL;
	}
	$current_url = _curPageURL();	
	$n = preg_match('/area/', $current_url); 
	if ($n == 0) {
		// Getting the area admin variables
	///////	$dataname = "area_type"; //default value "area_type"
	///////	$area_block_type = variable_get('area_block_type', "page");
	///////	$param1 = variable_get('area_param1', "type");
	///////	$param2 = variable_get('area_param2', "type");
	///////	$panelx = variable_get('area_panelx_block', "310"); //310;
	///////	$panely = variable_get('area_panely_block', "200"); //200;
	///////	$quantum = variable_get('area_quantum', "quantum");
		// Show only one block
		//$area_block = 1;
		// building area
		/////include('area.inc');
	} else {
		$page_content .= "This is Area page";
	}
	$block['subject'] = 'Area';
	$block['content'] = $page_content;
	return $block;
}

function area_admin() {
	include_once($base_path.'lib/functions.php');
	$options = area_get_distinct_values("type", "node", "area_type");
	$options = array_combine($options, $options);
	$form['area_block_type'] = array(
		'#type' => 'select',
		'#title' => t('Area block type'),
		'#default_value' => variable_get('area_block_type', "page"),
		'#options' => $options,
		'#description' => t("Wich content-type you want in the Area blocks:"),
		'#required' => TRUE,
	);
	$form['area_panelx'] = array(
		'#type' => 'textfield',
		'#title' => t('Area width'),
		'#default_value' => variable_get('area_panelx', 500),
		'#size' => 4,
		'#maxlength' => 4,
		'#description' => t("Horizontal size (in pixels)"),
		'#required' => TRUE,
	);
	$form['area_panely'] = array(
		'#type' => 'textfield',
		'#title' => t('Area heigth'),
		'#default_value' => variable_get('area_panely', 400),
		'#size' => 4,
		'#maxlength' => 4,
		'#description' => t("Vertical size (in pixels)"),
		'#required' => TRUE,
	);
	$form['area_panelx_block'] = array(
		'#type' => 'textfield',
		'#title' => t('Block Area width'),
		'#default_value' => variable_get('area_panelx_block', 310),
		'#size' => 4,
		'#maxlength' => 4,
		'#description' => t("Horizontal size (in pixels)"),
		'#required' => TRUE,
	);
	$form['area_panely_block'] = array(
		'#type' => 'textfield',
		'#title' => t('Block Area heigth'),
		'#default_value' => variable_get('area_panely_block', 200),
		'#size' => 4,
		'#maxlength' => 4,
		'#description' => t("Vertical size (in pixels)"),
		'#required' => TRUE,
	);
	$opcions_quantum = array("quantum" => "quantum", "non quantum" => "non quantum");
	$form['area_quantum'] = array(
		'#type' => 'select',
		'#title' => t('quantum?'),
		'#options' => $opcions_quantum,
		'#default_value' => variable_get('area_quantum', 'quantum'),
		'#description' => t("A quantum representation, show all the nodes the same size. A non-quantum one makes size of nodes related to the number of them"),
	);
	return system_settings_form($form);
}

function area_admin_validate($form, &$form_state) {
	$maxdisp = $form_state['values']['area_panelx_block'];
	if (!is_numeric($maxdisp)) {
		form_set_error('area_panelx_block', t('You must select a number between 50 and 5000.'));
	} else if ($maxdisp <= 49 or $maxdisp > 5000) {
		form_set_error('area_panelx_block', t('You must select a number between 50 and 5000.'));
	}
	$maxdisp = $form_state['values']['area_panely_block'];
	if (!is_numeric($maxdisp)) {
		form_set_error('area_panely_block', t('You must select a number.'));
	} else if ($maxdisp <= 49 or $maxdisp > 500) {
		form_set_error('area_panely_block', t('You must select a number between 50 and 5000.'));
	}
	$maxdisp = $form_state['values']['area_panely'];
	if (!is_numeric($maxdisp)) {
		form_set_error('area_panely', t('You must select a number.'));
	} else if ($maxdisp <= 49 or $maxdisp > 5000) {
		form_set_error('area_panely', t('You must select a number between 50 and 5000.'));
	}
}

function area_menu() {
	$items = array();
	$items['admin/settings/area'] = array(
		'title' => 'Area settings',
		'description' => 'Set the Area behevior.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('area_admin'),
		'access arguments' => array('access administration pages'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['area'] = array(
		'title' => 'Area representation',
		'page callback' => 'area_all',
		'access arguments' => array('access area content'),
		//'type' => MENU_CALLBACK
		'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}

function area_all() {
	// Getting the area admin variables
	$dataname = "area_type"; //default value "area_type"
	$param1 = variable_get('area_param1', "type");
	$param2 = variable_get('area_param1', "type");
	$panelx = variable_get('area_panelx', 500);
	$panely = variable_get('area_panelx', 400);
	$quantum = variable_get('area_quantum', "quantum");
	// building area
	include('area.inc');
	return $page_content;
}

